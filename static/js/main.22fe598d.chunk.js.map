{"version":3,"sources":["components/MessageForm.jsx","components/MyMessage.jsx","components/TheirMessage.jsx","components/ChatFeed.jsx","components/LoginForm.jsx","App.js","index.js"],"names":["MessageForm","props","useState","value","setValue","chatId","creds","handleSubmit","event","preventDefault","text","trim","length","sendMessage","className","onSubmit","placeholder","onChange","target","isTyping","htmlFor","PictureOutlined","type","multiple","id","style","display","files","SendOutlined","MyMessage","message","attachments","src","file","alt","float","marginRight","color","backgroundColor","TheirMessage","lastMessage","isFirstMessageByUser","sender","username","backgroundImage","avatar","marginLeft","ChatFeed","chats","activeChat","userName","messages","chat","renderReadReceipts","isMyMessage","people","map","person","index","last_read","title","keys","Object","key","lastMessageKey","width","renderMessages","height","LoginForm","setUsername","password","setPassword","error","setError","e","a","authObject","axios","get","headers","localStorage","setItem","window","location","reload","required","align","App","getItem","projectID","userSecret","renderChatFeed","chatAppProps","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.22fe598d.chunk.js","sourcesContent":["import { useState } from 'react';\nimport { sendMessage, isTyping } from 'react-chat-engine';\nimport { SendOutlined, PictureOutlined } from '@ant-design/icons';\n\nconst MessageForm = (props) => {\n  const [value, setValue] = useState('');\n  const { chatId, creds } = props;\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    const text = value.trim();\n\n    if (text.length > 0) sendMessage(creds, chatId, { text });\n\n    setValue('');\n  };\n\n  const handleChange = (event) => {\n    setValue(event.target.value);\n    isTyping(props, chatId);\n  };\n\n  const handleUpload = (event) => {\n    sendMessage(creds, chatId, { files: event.target.files, text: '' });\n  };\n\n  return (\n    <form className=\"message-form\" onSubmit={handleSubmit}>\n      <input\n        className=\"message-input\"\n        placeholder=\"Send a message...\"\n        value={value}\n        onChange={handleChange}\n        onSubmit={handleSubmit}\n      />\n      <label htmlFor=\"upload-button\">\n        <span className=\"image-button\">\n          <PictureOutlined className=\"picture-icon\" />\n        </span>\n      </label>\n      <input\n        type=\"file\"\n        multiple={false}\n        id=\"upload-button\"\n        style={{ display: 'none' }}\n        onChange={handleUpload}\n      />\n      <button type=\"submit\" className=\"send-button\">\n        <SendOutlined className=\"send-icon\" />\n      </button>\n    </form>\n  );\n};\n\nexport default MessageForm;\n","const MyMessage = ({ message }) => {\n  if (message?.attachments?.length > 0) {\n    return (\n      <img\n        src={message.attachments[0].file}\n        alt=\"message-attachment\"\n        className=\"message-image\"\n        style={{ float: 'right' }}\n      />\n    );\n  }\n  return (\n    <div\n      className=\"message\"\n      style={{\n        float: 'right',\n        marginRight: '18px',\n        color: 'white',\n        backgroundColor: '#3b2a50',\n      }}\n    >\n      {message.text}\n    </div>\n  );\n};\n\nexport default MyMessage;\n","const TheirMessage = ({ lastMessage, message }) => {\n  const isFirstMessageByUser =\n    !lastMessage || lastMessage.sender.username !== message.sender.username;\n\n  return (\n    <div className=\"message-row\">\n      {isFirstMessageByUser && (\n        <div\n          className=\"message-avatar\"\n          style={{ backgroundImage: `url(${message?.sender?.avatar})` }}\n        />\n      )}\n      {message?.attachments?.length > 0 ? (\n        <img\n          src={message.attachments[0].file}\n          alt=\"message-attachment\"\n          className=\"message-image\"\n          style={{ marginLeft: isFirstMessageByUser ? '4px' : '48px' }}\n        />\n      ) : (\n        <div\n          className=\"message\"\n          style={{\n            float: 'left',\n            backgroundColor: '#CABCDC',\n            marginLeft: isFirstMessageByUser ? '4px' : '48px',\n          }}\n        >\n          {message.text}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TheirMessage;\n","import MessageForm from './MessageForm';\nimport MyMessage from './MyMessage';\nimport TheirMessage from './TheirMessage';\n\nconst ChatFeed = (props) => {\n  const { chats, activeChat, userName, messages } = props;\n\n  const chat = chats && chats[activeChat];\n\n  const renderReadReceipts = (message, isMyMessage) => {\n    return chat.people.map(\n      (person, index) =>\n        person.last_read === message.id && (\n          <div\n            key={`read_${index}`}\n            className=\"read-receipt\"\n            style={{\n              float: isMyMessage ? 'right' : 'left',\n              backgroundImage: `url(${person?.person?.avatar})`,\n            }}\n          />\n        )\n    );\n  };\n\n  const renderMessages = () => {\n    const keys = Object.keys(messages);\n\n    return keys.map((key, index) => {\n      const message = messages[key];\n      const lastMessageKey = index === 0 ? null : keys[index - 1]; // find last message\n      const isMyMessage = userName === message.sender.userName;\n\n      return (\n        <div key={`msg_${index}`} style={{ width: '100%' }}>\n          <div className=\"message-block\">\n            {isMyMessage ? (\n              <MyMessage message={message} />\n            ) : (\n              <TheirMessage\n                message={message}\n                lastMessage={messages[lastMessageKey]}\n              />\n            )}\n          </div>\n          <div\n            className=\"read-receipts\"\n            style={{\n              marginRight: isMyMessage ? '18px' : '0px',\n              marginLeft: isMyMessage ? '0px' : '68px',\n            }}\n          >\n            {renderReadReceipts(message, isMyMessage)}\n          </div>\n        </div>\n      );\n    });\n  };\n\n  if (!chat) return 'Loading...';\n\n  return (\n    <div className=\"chat-feed\">\n      <div className=\"chat-title-container\">\n        <div className=\"chat-title\">{chat?.title}</div>\n        <div className=\"chat-subtitle\">\n          {chat.people.map((person) => ` ${person.person.username}`)}\n        </div>\n      </div>\n      {renderMessages()}\n      <div style={{ height: '100px' }} />\n      <div className=\"message-form-container\">\n        <MessageForm {...props} chatId={activeChat} />\n      </div>\n    </div>\n  );\n};\n\nexport default ChatFeed;\n","import { useState } from 'react';\nimport axios from 'axios';\n\nconst LoginForm = () => {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    const authObject = {\n      'Project-ID': 'ad6ec516-db79-4be4-8ce0-84a58ecfe6ba',\n      'User-Name': username,\n      'User-Secret': password,\n    };\n\n    try {\n      await axios.get('https://api.chatengine.io/chats', {\n        headers: authObject,\n      }); // logged in\n\n      localStorage.setItem('username', username);\n      localStorage.setItem('password', password);\n\n      window.location.reload();\n    } catch (error) {\n      setError('Incorrect login details.');\n    }\n  };\n\n  return (\n    <div className=\"wrapper\">\n      <div className=\"form\">\n        <h1 className=\"title\">Login to chat</h1>\n        <form onSubmit={handleSubmit}>\n          <input\n            type=\"text\"\n            value={username}\n            onChange={(e) => setUsername(e.target.value)}\n            className=\"input\"\n            placeholder=\"Username\"\n            required\n          />\n          <input\n            type=\"password\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            className=\"input\"\n            placeholder=\"Password\"\n            required\n          />\n          <div align=\"center\">\n            <button type=\"submit\" className=\"button\">\n              <span>Enter</span>\n            </button>\n          </div>\n          <h2 className=\"error\">{error}</h2>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default LoginForm;\n","import { ChatEngine } from 'react-chat-engine';\nimport ChatFeed from './components/ChatFeed';\nimport LoginForm from './components/LoginForm';\n\nimport './App.css';\n\nconst App = () => {\n  if (!localStorage.getItem('username')) return <LoginForm />;\n  return (\n    <ChatEngine\n      height=\"100vh\"\n      projectID=\"\n      ad6ec516-db79-4be4-8ce0-84a58ecfe6ba\"\n      userName={localStorage.getItem('username')}\n      userSecret={localStorage.getItem('password')}\n      renderChatFeed={(chatAppProps) => <ChatFeed {...chatAppProps} />}\n    />\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}